plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name + "-${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

repositories {
	maven { url "https://maven.parchmentmc.org" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://www.cursemaven.com" }

	flatDir {
		dir 'libs'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	// Mappings
	mappings loom.layered() {
		officialMojangMappings() // we want mojang mappins
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip") // and layered with community variable names
	}
	// Fabric loader
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	// Modmenu
	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
	// Configuration
	modImplementation "curse.maven:configuration-${project.configuration_project_id}:${project.configuration_file_id}"

	// JUnit
	testImplementation("org.junit.jupiter:junit-jupiter:${project.junit_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}
